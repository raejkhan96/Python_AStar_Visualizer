import pygame
import math
from queue import PriorityQueue


WIDTH = 800
# set up our window display using pygame
WIN = pygame.display.set_mode((WIDTH, WIDTH))
# set a caption for the display
pygame.display.set_caption("A* Path Finding Algorithm")

# color codes
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 255, 0)
YELLOW = (255, 255, 0)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PURPLE = (128, 0, 128)
ORANGE = (255, 165, 0)
GREY = (128, 128, 128)
TURQUOISE = (64, 244, 208)

# class - code template for creating objects, which have attributes
class Spot:
    # initialize the attributes of the class using methods

    def __init__(self, row, col, width, total_rows):
        self.row = row
        self.col = col
        self.x = row * width
        self.y = col * width
        self.color = WHITE
        self.neighbors = []
        self.width = WIDTH
        self.total_rows = total_rows

    def get_pos(self):
        return self.row, self.col

    def is_closed(self):
        return self.color == RED

    def is_open(self):
        return self.color == GREEN

    def is_barrier(self):
        return self.color == BLACK

    def is_start(self):
        return self.color == ORANGE

    def is_end(self):
        return self.color == TURQUOISE

    def reset(self):
        self.color = WHITE

    def make_start(self):
        self.color = ORANGE

    def make_closed(self):
        self.color = RED

    def make_open(self):
        self.color = GREEN

    def make_barrier(self):
        self.color = BLACK

    def make_start(self):
        self.color = ORANGE

    def make_end(self):
        self.color = TURQUOISE

    def make_path(self):
        self.color = PURPLE

    # go over pygame.draw.rect function
    def draw(self, win):
        pygame.draw.rect(win, self.color, (self.x, self.y, self.width, self.width))

    # determine the neighbors of the square
    # check if the row we're at is less than the total rows + 1
    def update_neighbors(self, grid):
        self.neighbors = []
        # want to move down a row - check if we can move down
        # remember 0,0, is at top left
        # 800,800 is bottom right
        # if we move down and no row exists, we will crash our program
        if self.row < self.total_rows - 1 and not grid[self.row + 1][self.col].is_barrier(): # down a row
            self.neighbors.append(grid[self.row + 1][self.col])
            # UP
        if self.row > 0 and not grid[self.row - 1][self.col].is_barrier():
            self.neighbors.append(grid[self.row - 1][self.col])
            # RIGHT
        if self.col < self.total_rows - 1 and not grid[self.row][self.col + 1].is_barrier():
            self.neighbors.append(grid[self.row][self.col + 1])
            # LEFT
        if self.col > 0 and not grid[self.row][self.col - 1].is_barrier():
            self.neighbors.append(grid[self.row][self.col - 1])


    # less than
    def __lt__(self, other):
        return False

# point 1 and point 2
# manhattan distance is L distance - because we cant move on diagonals
def h(p1,p2):
    x1, y1 = p1
    x2, y2 = p2
    # return the abs distance
    return abs(x1 - x2) + abs(y1 - y2)

# this function is the path of the A* algorithm
def reconstruct_path(came_from, current, draw):
    while current in came_from:
        current = came_from[current]
        current.make_path()
        draw()

# this function is the outline of the A* algorithm
def algorithm(draw, grid, start, end):
    count = 0
    # priortyQueue is an efficient way to get the smallest element out of it
    open_set = PriorityQueue()
    # if 2 values have the same F score, we're going to use the first F score
    open_set.put((0, count, start))
    came_from = {}
    g_score = {spot: float("inf") for row in grid for spot in row}
    g_score[start] = 0
    f_score = {spot: float("inf") for row in grid for spot in row}
    # f score is the heuristic function
    # a function that ranks alternatives in search algorithms at each branching step based on available information
    # to decide which branch to follow. For example, it may approximate the exact solution
    f_score[start] = h(start.get_pos(), end.get_pos())
    # keeps track of items in the priorty queue and items that aren't in the priority queue
    open_set_hash = {start}
    # runs while the open set is emp
    while not open_set.empty():
        # although the quit is already in the main function
        # this algorithm has its own loop, so we need to account for the quit button being pressed
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
        # open set is going to store the count, the node and the f score
        # take the second index - which is the start node
        current = open_set.get()[2]
        open_set_hash.remove(current)
        # if the node we just pulled out is the end node, we have found the shortest path
        if current == end:
            reconstruct_path(came_from, end, draw)
            end.make_end()
            return True
        # the distance to the node from the neighbor is 1 the current node plus 1
        # this makes sense ^
        for neighbor in current.neighbors:
            temp_g_score = g_score[current] + 1
            # if we find a better way to reach the final node, update the path
            if temp_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = temp_g_score
                f_score[neighbor] = temp_g_score + h(neighbor.get_pos(), end.get_pos())
                if neighbor not in open_set_hash:
                    count += 1
                    open_set.put((f_score[neighbor], count, neighbor))
                    open_set_hash.add(neighbor)
                    neighbor.make_open()

        draw()
        # if the node is not the start node, make it closed - red
        if current != start:
            current.make_closed()

    # this says, no path was found
    return False

# makes grid possible
def make_grid(rows, width):
    grid = []
    # floor division for each of the cubes
    gap = width // rows
    # i is row
    for i in range(rows):
        grid.append([])
        # j is column
        for j in range(rows):
            spot = Spot(i, j, gap, rows)
            grid[i].append(spot)
    return grid

#41:48
# need way to draw grid lines
def draw_grid(win, rows, width):
    gap = WIDTH // rows
    for i in range(rows):
        # draw horizontal line - surface, color, start_pos, end_pos
        pygame.draw.line(win, GREY, (0, i * gap), (width, i * gap))
        for j in range(rows):
            # draw horizontal line - surface, color, start_pos, end_pos
            pygame.draw.line(win, GREY, (j * gap, 0), (j * gap, width))

# fill row with one color, do this at the beginning of every frame

def draw(win, grid, rows, width):
    win.fill(WHITE)
    for row in grid:
        for spot in row:
            spot.draw(win)

    draw_grid(win, rows, width)
    pygame.display.update()

def get_clicked_pos(pos, rows, width):
    gap = width // rows
    y, x = pos

    row = y // gap
    col = x // gap

    return row, col

# main funnction - loops
def main(win, width):
    ROWS = 50
    grid = make_grid(ROWS, width)

    start = None
    end = None

    run = True

    while run:
        draw(win, grid, ROWS, width)
        # at the beginning of every loop, lets go through each event and check what they are
        # event could be anything - if someone pressed on the keyboard or timer went off
        # whatever events happen in pygame, we're looping through them
        for event in pygame.event.get():
            # check to see if the x button has been clicked, if so - stop the game
            if event.type == pygame.QUIT:
                run = False

            # if we press the left click on the mouse
            if pygame.mouse.get_pressed()[0]:
                # from the mouse position, get the row and column
                pos = pygame.mouse.get_pos()
                row, col = get_clicked_pos(pos, ROWS, WIDTH)
                spot = grid[row][col]
                # make the start button, make sure it is not the same as the end position
                if not start and spot != end:
                    start = spot
                    start.make_start()
                # make the end button, make sure it is not the same as the start pos
                elif not end and spot != start:
                    end = spot
                    end.make_end()
                # make the barrier
                elif spot != end and spot != start:
                    spot.make_barrier()

            # if we press the right click on the mouse
            elif pygame.mouse.get_pressed()[2]:
                pos = pygame.mouse.get_pos()
                row, col = get_clicked_pos(pos, ROWS, width)
                spot = grid[row][col]
                # if the mouse is right clicked, reset the spot to white
                spot.reset()
                if spot == start:
                    start = None
                elif spot == end:
                    end = None

            # if we press a button on the keyboard
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and start and end:
                    for row in grid:
                        for spot in row:
                            spot.update_neighbors(grid)
                    # 1:09:07
                    # Lambda is an anonymous function
                    algorithm(lambda: draw(win, grid, ROWS, width), grid, start, end)

                # clears entire screen
                if event.type == pygame.K_c:
                    start = None
                    end = None
                    grid = make_grid(ROWS, width)


    pygame.quit()


main(WIN, WIDTH)
